#Default Profile
spring:
  profiles:
    active: local
  # 데이터베이스 연결 정보
  datasource:
    url: jdbc:postgresql://localhost:5432/lotto  # 로컬 DB 또는 포트포워딩된 Docker DB 주소
    driver-class-name: org.postgresql.Driver

  # JPA (Java Persistence API) 설정
  jpa:
    hibernate:
      # ddl-auto: 애플리케이션 실행 시점에 DB 스키마(테이블 등)를 어떻게 할지 결정
      #   - create: 기존 테이블을 삭제하고 새로 생성 (개발 초기 단계에 유용)
      #   - update: 변경된 부분만 반영
      #   - validate: 엔티티와 테이블이 정상 매핑되었는지 검사
      #   - none: 아무것도 하지 않음 (운영 환경에서 권장)
      ddl-auto: update
    properties:
      hibernate:
        # 콘솔에 JPA가 실행하는 SQL 쿼리를 보여줌
        show_sql: true
        # SQL 쿼리를 보기 좋게 포맷팅
        format_sql: true
        # 기본 스키마 이름을 지정 (PostgreSQL에서 user라는 이름의 테이블 생성을 피하기 위함)
        default_schema: public
    # 데이터베이스 종류를 명시적으로 지정
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  #OAuth2 클라이언트 설정
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile

---
#Docker Profile
spring:
  config:
    activate:
      on-profile: "docker"
  data:
    redis:
      host: redis #Docker 환경에서는 'redis' 컨테이너를 바라봄
      port: 6379

# 로깅 레벨 설정 (JPA 쿼리 파라미터 값도 로그로 보려면)
logging:
  level:
    org.hibernate.type.descriptor.sql: trace