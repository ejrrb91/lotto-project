services: # 이 파일로 관리할 서비스(컨테이너)들의 목록

  # PostgreSQL 데이터베이스 서비스 정의
  db:
    image: postgres:17 # 공식 PostgreSQL 15 버전 이미지를 사용
    container_name: lotto_db_container # 컨테이너에 이름 부여
    environment: # 컨테이너 내에서 사용할 환경 변수 (매우 중요)
      POSTGRES_DB: lotto          # application.yml의 DB 이름과 일치
      POSTGRES_USER: lotto_id     # application.yml의 username과 일치
      POSTGRES_PASSWORD: lotto_pw # application.yml의 password와 일치
    ports:
      # 로컬 컴퓨터의 5432 포트와 컨테이너의 5432 포트를 연결
      # 만약 로컬에 이미 PostgreSQL이 5432 포트를 쓰고 있다면, "5433:5432" 와 같이 변경
      - "5432:5432"
    volumes: # 데이터를 영구적으로 저장하기 위한 설정
      - postgres_data:/var/lib/postgresql/data

  # Redis 서비스 정의
  redis:
    image: redis:7-alpine #경량화된 Redis 이미지 사용
    container_name: lotto_redis_container
    ports:
      - "6379:6379" #로컬 6379 포트와 컨테이너 6379 포트 연결

  # Spring Boot 백엔드 애플리케이션 서비스 정의
  backend:
    build: . # 현재 디렉토리(.)의 Dockerfile을 사용하여 이미지를 빌드
    container_name: lotto_backend_container
    # ports 항목은 Nginx를 통해 외부와 통신하므로 제거
    depends_on:
      - db # 'db' 서비스가 먼저 실행된 후에 'backend' 서비스를 실행
      - redis # backend 서비스가 redis 서비스에 의존하도록 설정
    environment:
      # Spring Boot 애플리케이션이 컨테이너 내부의 'db'를 바라보도록 설정
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/lotto
      - SPRING_DATASOURCE_USERNAME=lotto_id
      - SPRING_DATASOURCE_PASSWORD=lotto_pw
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
      - TZ=Asia/Seoul
      # SPRING BOOT가 컨테이너 내부의 redis를 바라보도록 설정
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379

  # frontend와 nginx 서비스를 'web' 서비스 하나로 통합
  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lotto_web_container
    ports:
      #사용자는 80번 포트를 통해 서비스에 접속
      - "80:80"
    volumes:
      # Nginx 설정을 이 컨테이너에 직접 적용
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend # 백엔드가 실행된 후 웹서버 실행할 수 있도록 설정


volumes:
  postgres_data:
  #external: true #이 볼륨은 외부에서 관리하므로 삭제 X